#!/usr/bin/env gura
import(re)
import(wx)
import(wx.utils)
import(jpeg)
import(translate)
import(global, g)

//-----------------------------------------------------------------------------
// Control ID
//-----------------------------------------------------------------------------
[
	ID_EditPattern
] = wx.ID_HIGHEST..

//-----------------------------------------------------------------------------
// PatternEditorPanel
//-----------------------------------------------------------------------------
PatternEditorPanel = class(wx.Panel) {
	TimerId = 1
	YYYY = '2015'
	YY = '15'
	MM = '03'
	DD = '21'
	hh = '13'
	mm = '24'
	ss = '47'
	QQ = 'AA'
	N = '1'
	__init__(parent:wx.Windowm) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 2))
		wx.StaticBox(this, wx.ID_ANY, 'Substitution Pattern'$) {|stb|
			vboxIn = wx.StaticBoxSizer(stb, wx.VERTICAL)
			vbox.Add(vboxIn, wx.SizerFlags().Expand())
			gbox = wx.FlexGridSizer(nil, 2, 4, 8)
			vboxIn.Add(gbox, wx.SizerFlags().Expand())
			gbox.AddGrowableCol(1, 1)
			wx.StaticText(this, wx.ID_ANY, 'Folder Name'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Expand())
			}
			wx.TextCtrl(this, wx.ID_ANY, g.substPatternFolder) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags(1).Expand())
				ctrl.Bind(wx.EVT_TEXT) {|event| this.OnText(event)}
				this.textSubstPatternFolder = ctrl
			}
			wx.StaticText(this, wx.ID_ANY, 'File Name'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Expand())
			}
			wx.TextCtrl(this, wx.ID_ANY, g.substPatternFile) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags(1).Expand())
				ctrl.Bind(wx.EVT_TEXT) {|event| this.OnText(event)}
				this.textSubstPatternFile = ctrl
			}
		}
		wx.StaticBox(this, wx.ID_ANY, 'Match Pattern'$) {|stb|
			vboxIn = wx.StaticBoxSizer(stb, wx.VERTICAL)
			vbox.Add(vboxIn, wx.SizerFlags().Expand())
			gbox = wx.FlexGridSizer(nil, 2, 4, 8)
			vboxIn.Add(gbox, wx.SizerFlags().Expand())
			gbox.AddGrowableCol(1, 1)
			wx.StaticText(this, wx.ID_ANY, 'Folder Name'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Expand())
			}
			wx.TextCtrl(this, wx.ID_ANY, g.matchPatternFolder) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags(1).Expand())
				ctrl.Bind(wx.EVT_TEXT) {|event| this.OnText(event)}
				this.textMatchPatternFolder = ctrl
			}
		}
		str = format('Sample: '$ + '%s-%s-%s %s:%s:%s', YYYY, MM, DD, hh, mm, ss)
		wx.StaticBox(this, wx.ID_ANY, str) {|stb|
			vboxIn = wx.StaticBoxSizer(stb, wx.VERTICAL)
			vbox.Add(vboxIn, wx.SizerFlags().Expand().Border(wx.TOP, 8))
			gbox = wx.FlexGridSizer(nil, 2, 4, 8)
			vboxIn.Add(gbox, wx.SizerFlags().Expand())
			gbox.AddGrowableCol(1, 1)
			wx.StaticText(this, wx.ID_ANY, 'Folder Name'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Expand())
			}
			wx.TextCtrl(this, wx.ID_ANY, '', style => wx.TE_READONLY) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.textResultFolder = ctrl
			}
			wx.StaticText(this, wx.ID_ANY, 'File Name'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Expand())
			}
			wx.TextCtrl(this, wx.ID_ANY, '', style => wx.TE_READONLY) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.textResultFile = ctrl
			}
		}
		wx.HtmlWindow(this, style => wx.SUNKEN_BORDER) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 8))
			ctrl.SetPage('@PatternHelp'$)
		}
		wx.Button(this, wx.ID_OK, 'OK'$) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Border(wx.TOP, 8).Align(wx.ALIGN_CENTRE))
		}
		this.timer = wx.Timer(this, TimerId)
		this.Bind(wx.EVT_TIMER, this.TimerId) {|event| this.OnTimer(event)}
		this.UpdateSample(this.textSubstPatternFolder, this.textResultFolder)
		this.UpdateSample(this.textSubstPatternFile, this.textResultFile)
	}
	OnText(event:wx.CommandEvent) = {
		this.timer.Start(500, true)
	}
	OnTimer(event:wx.TimerEvent) = {
		this.UpdateSample(this.textSubstPatternFolder, this.textResultFolder)
		this.UpdateSample(this.textSubstPatternFile, this.textResultFile)
	}
	UpdateSample(textSubstPattern:wx.TextCtrl, textResult:wx.TextCtrl) = {
		strTmpl = textSubstPattern.GetValue()
		try {
			str = strTmpl.embed()
			textResult.SetForegroundColour(wx.BLACK)
			textResult.SetValue(str)
		} catch {|e|
			textResult.SetForegroundColour(wx.RED)
			textResult.SetValue(e.text)
		}
	}
}

//-----------------------------------------------------------------------------
// PatternEditorDialog
//-----------------------------------------------------------------------------
PatternEditorDialog = class(wx.Dialog) {
	__init__(parent:wx.Window:nil, pos:wx.Point => wx.DefaultPosition) = \
		{|parent, wx.ID_ANY, 'Edit Pattern'$, pos, wx.Size(600, 500),
		  style => wx.DEFAULT_DIALOG_STYLE|
		this.SetIcon(g.icon)
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 2))
		PatternEditorPanel(this) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand())
		}
	}
}

//-----------------------------------------------------------------------------
// Splitter
//-----------------------------------------------------------------------------
Splitter = struct(rc:wx.Rect, idxImage:number, orientation:symbol)

//-----------------------------------------------------------------------------
// ImageInfo
//-----------------------------------------------------------------------------
ImageInfo = struct(pathName:string, pathNameSource:string:nil, image:wx.Bitmap:nil, stat:symbol):map {
	UpdateImage(sizeThumbnail:number) = {
		try {
			this.image:wx.Bitmap = image(`rgb).read@jpeg(this.pathName, sizeThumbnail):fast:rough
			return(true)
		} catch {}
		false
	}
}

//-----------------------------------------------------------------------------
// ContainerInfo
//-----------------------------------------------------------------------------
ContainerInfo = struct(type:symbol, dirName:string, dirDispName:string,
					   imageInfos[]:ImageInfo,
					   y:number, height:number, rcExpand:wx.Rect, splitters[]:Splitter,
					   expandFlag:boolean)

//-----------------------------------------------------------------------------
// utilities
//-----------------------------------------------------------------------------
GetTimeStamp(pathName:string) = {
	try {
		exif = jpeg.exif(pathName)
		m = exif.DateTime.value.match(r'(\d{4}):(\d{2}):(\d{2})\s+(\d{2}):(\d{2}):(\d{2})')
		m && return(datetime(int(m[1..6])*))
	} catch {}
	try {
		stat = path.stat(pathName)
		mtime = stat.mtime
		datetime(mtime.year, mtime.month, mtime.day, mtime.hour, mtime.min, mtime.sec)
	} catch {
		nil
	}
}

MakePathNameFromDatetime(dt:datetime) = {
	dirNameStorage = g.dirNameStorage
	YYYY = format('%04d', dt.year)
	YY = format('%02d', dt.year % 100)
	MM = format('%02d', dt.month)
	DD = format('%02d', dt.day)
	hh = format('%02d', dt.hour)
	mm = format('%02d', dt.min)
	ss = format('%02d', dt.sec)
	QQ = 'AA'
	N = '1'
	dirDispName = g.substPatternFolder.embed()
	[
		path.join(dirNameStorage, dirDispName)
		dirDispName
		g.substPatternFile.embed()
	]
}

//-----------------------------------------------------------------------------
// ImageViewer
//-----------------------------------------------------------------------------
ImageViewer = class(wx.Panel) {
	TimerId = 1
	sizeThumbnail = 180
	wdSkip = 8, htSkip = 8
	htBar = 20
	htLabel = 16
	wdMgnLeft = 20, wdMgnRight = 4
	htMgnTop = 4, htMgnBottom = 8
	htScrollLine = 100
	htScrollPage = 400
	fileNamePatternAcceptable = ['*.JPG', '*.jpg', '*.JPEG', '*.jpeg']
	__init__(parent:wx.Windowm, style:number) \
		= {|parent, style => (style | wx.HSCROLL | wx.VSCROLL)|
		this.bmpScreen = nil
		this.penSlotBlank = wx.Pen(wx.Colour(64, 64, 64), 1, wx.PENSTYLE_DOT)
		this.brushSlotBlank = wx.NullBrush
		this.brushSlotBlank@Sel = wx.Brush(wx.Colour(192, 192, 192), wx.BRUSHSTYLE_SOLID)
		this.brushBg = wx.Brush(wx.WHITE, wx.BRUSHSTYLE_SOLID)
		this.penSlot = wx.NullPen
		this.brushSlot = wx.Brush(wx.Colour(200, 200, 200), wx.BRUSHSTYLE_SOLID)
		this.brushSlot@Sel = wx.Brush(wx.Colour(128, 128, 128), wx.BRUSHSTYLE_SOLID)
		this.penSlotProgress = wx.NullPen
		this.brushSlotProgress = wx.Brush(wx.Colour(240, 240, 240), wx.BRUSHSTYLE_SOLID)
		this.fgBarText = wx.BLACK
		this.fgBarText@Sel = wx.WHITE
		this.fgBarLinkText = wx.Colour(0, 0, 255)
		this.fgBarLinkText@Sel = wx.WHITE
		this.brushBarSource = wx.Brush(wx.Colour(255, 255, 255), wx.BRUSHSTYLE_SOLID)
		this.brushBarStorage = wx.Brush(wx.Colour(255, 255, 255), wx.BRUSHSTYLE_SOLID)
		this.brushBarSource@Sel = wx.Brush(wx.Colour(0, 0, 200), wx.BRUSHSTYLE_SOLID)
		this.brushBarStorage@Sel = wx.Brush(wx.Colour(0, 0, 200), wx.BRUSHSTYLE_SOLID)
		this.containerInfosForSource = []
		this.containerInfosForStorage = []
		this.timer = wx.Timer(this, TimerId)
		this.imageInfoQue = []
		this.containerInfoSel = nil
		this.imageInfoSel = nil
		this.font = wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL,
							wx.FONTWEIGHT_NORMAL)
		this.fontBold = wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL,
							wx.FONTWEIGHT_BOLD)
		this.fontBoldUL = wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL,
							  wx.FONTWEIGHT_BOLD)
		this.fontBoldUL.SetUnderlined(true)
		this.nCols = 1
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_TIMER, this.TimerId) {|event| this.OnTimer(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
		this.Bind(wx.EVT_SCROLLWIN) {|event| this.OnScrollWin(event)}
		this.Bind(wx.EVT_MOUSEWHEEL) {|event| this.OnMouseWheel(event)}
		this.Bind(wx.EVT_LEFT_DOWN) {|event| this.OnLeftDown(event)}
		this.Bind(wx.EVT_LEFT_UP) {|event| this.OnLeftUp(event)}
		this.Bind(wx.EVT_MOTION) {|event| this.OnMotion(event)}
		this.Bind(wx.EVT_KEY_DOWN) {|event| this.OnKeyDown(event)}
		this.Bind(wx.EVT_IDLE) {|event| this.OnIdle(event)}
	}
	InitSelection() = {
		this.containerInfoSel = nil
		this.imageInfoSel = nil
		if (!this.containerInfosForSource.isempty()) {
			this.containerInfoSel = this.containerInfosForSource.first()
		} elsif (!this.containerInfosForStorage.isempty()) {
			this.containerInfoSel = this.containerInfosForStorage.first()
		}
	}
	UpdateContainerInfosForSource() = {
		dirNameSource = g.dirNameSource
		pathNamesSource = path.walk(dirNameSource, -1, fileNamePatternAcceptable*):file
		this.containerInfosForSource = []
		pathNamesSource.each():xlist {|pathNameSource|
			dt = GetTimeStamp(pathNameSource)
			!dt && continue
			[dirName, dirDispName, fileName] = MakePathNameFromDatetime(dt)
			if (idx = (this.containerInfosForSource:*dirName == dirName).find():index) {
				containerInfo = this.containerInfosForSource[idx]
			} else {
				containerInfo = ContainerInfo(
						`source, dirName, dirDispName, [], 0, 0, wx.Rect(0, 0, 20, 20), [], false)
				this.containerInfosForSource.add(containerInfo)
			}
			containerInfo.imageInfos.add(ImageInfo(
					path.join(dirName, fileName), pathNameSource, nil, `source))
		}
		!this.containerInfosForSource.isempty()
	}
	UpdateContainerInfosForStorage() = {
		dirNameStorage = g.dirNameStorage
		dirNames = (path.walk(dirNameStorage, 1, '*'):dir).sort(`descend):list
		this.containerInfosForStorage = dirNames.each():xlist {|dirName|
			pathNames = [path.dir(dirName, fileNamePatternAcceptable*)]
			pathNames.isempty() && continue
			dirName = dirName.chop()
			dirDispName = dirName.mid(dirNameStorage.len() + 1)
			!dirDispName.match('^' + g.matchPatternFolder) && continue
			ContainerInfo(
					`storage, dirName, dirDispName, ImageInfo(pathNames, nil, nil, `storage),
					0, 0, wx.Rect(0, 0, 20, 20), [], false)
		}
		!this.containerInfosForStorage.isempty()
	}
	EnsureSelectionVisible() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		yScrollPos = this.GetScrollPos(wx.VERTICAL)
		if (this.imageInfoSel) {
			idxImage = this.containerInfoSel.imageInfos.find(this.imageInfoSel):index
			[xSlot, ySlot] = this.CalcSlotPosition(this.containerInfoSel, idxImage)
			yTop = ySlot
			yBottom = yTop + sizeThumbnail + htLabel
		} else {
			yTop = this.containerInfoSel.y
			yBottom = yTop + htBar
		}
		if (yTop < yScrollPos) {
			this.SetScrollPos(wx.VERTICAL, yTop)
		} elsif (yBottom > yScrollPos + htClient) {
			this.SetScrollPos(wx.VERTICAL, yBottom - htClient)
		}
	}
	UpdateContent() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		y = 0
		this.nCols = int((wdClient - (wdMgnLeft + wdMgnRight) + wdSkip) / (sizeThumbnail + wdSkip))
		containerInfos = (
				this.containerInfosForSource.each(),
				this.containerInfosForStorage.each())
		containerInfos.each {|containerInfo|
			containerInfo.y = y
			containerInfo.rcExpand.y = y
			height = 0
			height += htBar
			if (containerInfo.expandFlag) {
				height += htMgnTop
				nRows = int((containerInfo.imageInfos.len() + this.nCols - 1) / this.nCols)
				htImages = nRows * (sizeThumbnail + htLabel)
				if (nRows > 1) { htImages += (nRows - 1) * htSkip }
				height += htImages
			}
			height += htMgnBottom
			containerInfo.height = height
			y += height
		}
		htRequired = y
		htScreen = max(htClient, htRequired)
		this.bmpScreen = wx.BitmapWH(wdClient, htClient)
		dc = wx.MemoryDC(this.bmpScreen)
		dc.SetBackground(this.brushBg)
		dc.Clear()
		dirNameStorage = g.dirNameStorage
		yScrollPos = this.GetScrollPos(wx.VERTICAL)
		dc.SetDeviceOrigin(0, -yScrollPos)
		containerInfos.each {|containerInfo|
			containerInfo.rcsSplit = []
			(containerInfo.y + containerInfo.height < yScrollPos) && continue
			(containerInfo.y >= yScrollPos + htClient) && break
			htDisp = containerInfo.y + containerInfo.height - yScrollPos
			if (containerInfo.expandFlag) {
				containerInfo.imageInfos.each {|imageInfo, idxImage|
					selectedFlag = imageInfo.is(this.imageInfoSel)
					[xSlot, ySlot] = this.CalcSlotPosition(containerInfo, idxImage)
					(ySlot + sizeThumbnail <= yScrollPos) && continue
					(ySlot >= yScrollPos + htClient) && break
					iCol = idxImage % this.nCols
					if (idxImage == 0) {
						// nothing to do
					} elsif (iCol == 0) {
						rc = wx.Rect(0, ySlot - htSkip, wdClient, htSkip)
						containerInfo.splitters.add(Splitter(rc, idxImage - 1, `horizontal))
					} else {
						rc = wx.Rect(xSlot - wdSkip, ySlot, wdSkip, sizeThumbnail)
						containerInfo.splitters.add(Splitter(rc, idxImage - 1, `vertical))
					}
					if (imageInfo.stat == `source) {
						dc.SetPen(this.penSlotBlank)
						dc.SetBrush(cond(selectedFlag,
										 this.brushSlotBlank@Sel, this.brushSlotBlank))
						dc.DrawRectangle(xSlot, ySlot, sizeThumbnail, sizeThumbnail)
						str = path.filename(imageInfo.pathNameSource)
						[wdStr, htStr] = dc.GetTextExtent(str)
						xStr = xSlot + (sizeThumbnail - wdStr) / 2
						yStr = ySlot + (sizeThumbnail - htStr) / 2
						dc.SetFont(this.font)
						dc.SetTextForeground(wx.Colour(140, 140, 140))
						dc.DrawText(str, xStr, yStr)
					} elsif (imageInfo.stat == `storage) {
						dc.SetPen(this.penSlot)
						dc.SetBrush(cond(selectedFlag,
										 this.brushSlot@Sel, this.brushSlot))
						dc.DrawRectangle(xSlot, ySlot, sizeThumbnail, sizeThumbnail)
						if (imageInfo.image) {
							xImage = xSlot + (sizeThumbnail - imageInfo.image.width) / 2
							yImage = ySlot + (sizeThumbnail - imageInfo.image.height) / 2
							dc.DrawBitmap(imageInfo.image, xImage, yImage, false)
						}
					} elsif (imageInfo.stat == `progress) {
						dc.SetPen(this.penSlotProgress)
						dc.SetBrush(this.brushSlotProgress)
						dc.DrawRectangle(xSlot, ySlot, sizeThumbnail, sizeThumbnail)
					}
					str = path.filename(imageInfo.pathName)
					[wdStr, htStr] = dc.GetTextExtent(str)
					xStr = xSlot + (sizeThumbnail - wdStr) / 2
					yStr = ySlot + sizeThumbnail
					dc.SetFont(this.font)
					dc.SetTextForeground(wx.BLACK)
					dc.DrawText(str, xStr, yStr)
				}
			}
			if (htDisp > htBar) {
				highlightFlag = containerInfo.is(this.containerInfoSel) && !this.imageInfoSel
				yBar = max(yScrollPos, containerInfo.y)
				containerInfo.rcExpand.y = yBar
				dc.SetPen(wx.NullPen)
				if (highlightFlag) {
					dc.SetBrush(cond(containerInfo.type == `source,
									 this.brushBarSource@Sel, this.brushBarStorage@Sel))
				} else {
					dc.SetBrush(cond(containerInfo.type == `source,
									 this.brushBarSource, this.brushBarStorage))
				}
				dc.DrawRectangle(0, yBar, wdClient, htBar)
				if (containerInfo.expandFlag) {
					dc.DrawBitmap(g.bmpExpandMinus, 0, yBar, false)
				} else {
					dc.DrawBitmap(g.bmpExpandPlus, 0, yBar, false)
				}
				if (m = containerInfo.dirDispName.match('^' + g.matchPatternFolder + r' *')) {
					strLeft = m[0]
					strRight = containerInfo.dirDispName.mid(strLeft.len())
					if (strRight.match('^#')) {
						strRight = 'Click to Fill Name'$
					}
					dc.SetFont(this.fontBold)
					dc.SetTextForeground(cond(highlightFlag,
											  this.fgBarText@Sel, this.fgBarText))
					dc.DrawText(strLeft, 20, yBar)
					[wdStr, htStr] = dc.GetTextExtent(strLeft)
					dc.SetFont(this.fontBoldUL)
					dc.SetTextForeground(cond(highlightFlag,
											  this.fgBarLinkText@Sel, this.fgBarLinkText))
					dc.DrawText(strRight, 20 + wdStr, yBar)
				} else {
					dc.SetFont(this.fontBold)
					dc.SetTextForeground(cond(highlightFlag,
											  this.fgBarText@Sel, this.fgBarText))
					dc.DrawText(containerInfo.dirDispName, 20, yBar)
				}
				str = format('%d images'$, containerInfo.imageInfos.len())
				[wdStr, htStr] = dc.GetTextExtent(str)
				dc.SetFont(this.fontBold)
				dc.SetTextForeground(cond(highlightFlag,
										  this.fgBarText@Sel, this.fgBarText))
				dc.DrawText(str, wdClient - wdStr, yBar)
			}
		}
		this.SetScrollbar(wx.VERTICAL, this.GetScrollPos(wx.VERTICAL), htClient, htScreen)
		this.Refresh()
		this.Update()
	}
	CalcSlotPosition(containerInfo:ContainerInfo, idxImage:number) = {
		xSlot = wdMgnLeft + (idxImage % this.nCols) * (sizeThumbnail + wdSkip)
		ySlot = containerInfo.y + htBar + htMgnTop + \
			int(idxImage / this.nCols) * (sizeThumbnail + htLabel + htSkip)
		[xSlot, ySlot]
	}
	CopyImageFiles(label:wx.StaticText) = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.quitFlag = false
		nImages = this.containerInfosForSource:*imageInfos:*len().sum()
		idxImageWhole = 0
		htSlot = sizeThumbnail + htLabel
		yScrollPos = this.GetScrollPos(wx.VERTICAL)
		containerInfo = this.containerInfosForSource.first()
		if (containerInfo.y < yScrollPos) {
			this.SetScrollPos(wx.VERTICAL, containerInfo.y)
			this.UpdateContent()
		}
		this.containerInfosForSource.each {|containerInfo|
			if (!containerInfo.expandFlag) {
				containerInfo.expandFlag = true
				this.UpdateContent()
			}
			containerInfo.imageInfos.each {|imageInfo, idxImageInfo|
				label.SetLabel(format('%d/%d', idxImageWhole + 1, nImages))
				dirName = path.dirname(imageInfo.pathName)
				!path.exists(dirName) && fs.mkdir(dirName):tree
				[xSlot, ySlot] = this.CalcSlotPosition(containerInfo, idxImageInfo)
				yScrollPos = this.GetScrollPos(wx.VERTICAL)
				if (ySlot + htSlot > yScrollPos + htClient) {
					yScrollPos = ySlot + htSlot - htClient
					this.SetScrollPos(wx.VERTICAL, yScrollPos)
					this.UpdateContent()
				}
				imageInfo.stat = `progress
				this.UpdateContent()
				stat = path.stat(imageInfo.pathNameSource)
				stream.copy(imageInfo.pathNameSource, imageInfo.pathName):finalize {
					this.Update()
					wx.App.GetInstance().Yield()
					this.quitFlag && break
				}
				if (imageInfo.UpdateImage(sizeThumbnail)) {
					imageInfo.stat = `storage
					this.UpdateContent()
				} else {
					imageInfo.stat = `source
				}
				this.quitFlag && break
				idxImageWhole += 1
			}
			this.quitFlag && break
		}
	}
	QuitCopy() = {
		this.quitFlag = true
	}
	ChangeExpandStatus(containerInfo:ContainerInfo) = {
		if (containerInfo.type == `storage) {
			if (containerInfo.expandFlag) {
				this.imageInfoQue.append(containerInfo.imageInfos)
			} else {
				indices = this.imageInfoQue.find(containerInfo.imageInfos):map:index:xlist
				this.imageInfoQue.erase(indices*)
			}
		}
	}
	SenseBox(pt:wx.Position, clickFlag:boolean) = {
		x = pt.x, y = pt.y + this.GetScrollPos(wx.VERTICAL)
		[this.containerInfosForSource, this.containerInfosForStorage].each {|containerInfos|
			if (idx = containerInfos:*rcExpand:*ContainsXY(x, y).find():index) {
				if (clickFlag) {
					containerInfo = containerInfos[idx]
					containerInfo.expandFlag = !containerInfo.expandFlag
					this.ChangeExpandStatus(containerInfo)
					this.UpdateContent()
				}
				this.SetCursor(wx.StockCursor(wx.CURSOR_HAND))
				return
			}
			containerInfos.each {|containerInfo|
				if (idx = containerInfo.splitters:*rc:*ContainsXY(x, y).find():index) {
					splitter = containerInfo.splitters[idx]
					if (splitter.orientation == `vertical) {
						this.SetCursor(wx.StockCursor(wx.CURSOR_SIZEWE))
					} else {
						this.SetCursor(wx.StockCursor(wx.CURSOR_SIZENS))
					}
					if (clickFlag) {
						
					}
					return
				}
			}
		}
		this.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
	}
	OnLeftDown(event:wx.MouseEvent) = {
		this.SenseBox(event.GetPosition(), true)
	}
	OnLeftUp(event:wx.MouseEvent) = {
	}
	OnMotion(event:wx.MouseEvent) = {
		this.SenseBox(event.GetPosition(), false)
	}
	OnSize(event:wx.SizeEvent) = {
		this.timer.Start(100, true)
		event.Skip()
	}
	OnTimer(event:wx.TimerEvent) = {
		this.UpdateContent()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		if (this.bmpScreen) {
			x = this.GetScrollPos(wx.HORIZONTAL)
			dc.DrawBitmap(this.bmpScreen, -x, 0, false)
		}
		dc = nil
	}
	OnScrollWin(event:wx.ScrollWinEvent) = {
		eventType = event.GetEventType()
		orientation = event.GetOrientation()
		if (eventType == wx.EVT_SCROLLWIN_TOP.GetEventType()) {
			pos = 0
		} elsif (eventType == wx.EVT_SCROLLWIN_BOTTOM.GetEventType()) {
			pos = this.GetScrollRange(orientation)
		} elsif (eventType == wx.EVT_SCROLLWIN_LINEUP.GetEventType()) {
			pos = this.GetScrollPos(orientation) - htScrollLine
		} elsif (eventType == wx.EVT_SCROLLWIN_LINEDOWN.GetEventType()) {
			pos = this.GetScrollPos(orientation) + htScrollLine
		} elsif (eventType == wx.EVT_SCROLLWIN_PAGEUP.GetEventType()) {
			pos = this.GetScrollPos(orientation) - htScrollPage
		} elsif (eventType == wx.EVT_SCROLLWIN_PAGEDOWN.GetEventType()) {
			pos = this.GetScrollPos(orientation) + htScrollPage
		} elsif (eventType == wx.EVT_SCROLLWIN_THUMBTRACK.GetEventType()) {
			pos = event.GetPosition()
		} elsif (eventType == wx.EVT_SCROLLWIN_THUMBRELEASE.GetEventType()) {
			pos = event.GetPosition()
		}
		this.SetScrollPos(orientation, pos)
		this.UpdateContent()
	}
	OnMouseWheel(event:wx.MouseEvent) = {
		orientation = wx.VERTICAL
		rot = event.GetWheelRotation()
		pos = this.GetScrollPos(orientation)
		if (rot < 0) {
			this.SetScrollPos(orientation, pos + htScrollLine)
			this.UpdateContent()
		} elsif (rot > 0) {
			this.SetScrollPos(orientation, pos - htScrollLine)
			this.UpdateContent()
		}
	}
	OnKeyDown(event:wx.KeyEvent) = {
		keyCode = event.GetKeyCode()
		if (keyCode == wx.WXK_UP) {
			if (this.imageInfoSel) {
				imageInfos = this.containerInfoSel.imageInfos
				idxImage = imageInfos.find(this.imageInfoSel):index
				idxImage -= this.nCols
				if (idxImage >= 0) {
					this.imageInfoSel = imageInfos[idxImage]
				} else {
					this.imageInfoSel = nil
				}
			} else {
				selectImageFlag = false
				idxContainer = this.containerInfosForSource.find(this.containerInfoSel):index
				if (idxContainer) {
					if (idxContainer > 0) {
						this.containerInfoSel = this.containerInfosForSource[idxContainer - 1]
						selectImageFlag = true
					}
				} else {
					idxContainer = this.containerInfosForStorage.find(this.containerInfoSel):index
					if (idxContainer > 0) {
						this.containerInfoSel = this.containerInfosForStorage[idxContainer - 1]
						selectImageFlag = true
					} elsif (!this.containerInfosForSource.isempty()) {
						this.containerInfoSel = this.containerInfosForSource.last()
						selectImageFlag = true
					}
				}
				if (selectImageFlag) {
					imageInfos = this.containerInfoSel.imageInfos
					if (!imageInfos.isempty() && this.containerInfoSel.expandFlag) {
						idxImage = int((imageInfos.len() - 1) / this.nCols) * this.nCols
						this.imageInfoSel = imageInfos[idxImage]
					}
				}
			}
			this.EnsureSelectionVisible()
			this.UpdateContent()
		} elsif (keyCode == wx.WXK_DOWN) {
			forwardContainerFlag = false
			imageInfos = this.containerInfoSel.imageInfos
			if (this.imageInfoSel) {
				idxImage = imageInfos.find(this.imageInfoSel):index
				idxImage += this.nCols
				if (idxImage < imageInfos.len()) {
					this.imageInfoSel = imageInfos[idxImage]
				} else {
					forwardContainerFlag = true
					this.imageInfoSel = nil
				}
			} elsif (imageInfos.isempty() || !this.containerInfoSel.expandFlag) {
				forwardContainerFlag = true
			} else {
				this.imageInfoSel = imageInfos.first()
			}
			if (forwardContainerFlag) {
				idxContainer = this.containerInfosForSource.find(this.containerInfoSel):index
				if (idxContainer) {
					if (idxContainer + 1 < this.containerInfosForSource.len()) {
						this.containerInfoSel = this.containerInfosForSource[idxContainer + 1]
					} elsif (!this.containerInfosForStorage.isempty()) {
						this.containerInfoSel = this.containerInfosForStorage.first()
					}
				} else {
					idxContainer = this.containerInfosForStorage.find(this.containerInfoSel):index
					if (idxContainer + 1 < this.containerInfosForStorage.len()) {
						this.containerInfoSel = this.containerInfosForStorage[idxContainer + 1]
					}
				}
			}
			this.EnsureSelectionVisible()
			this.UpdateContent()
		} elsif (keyCode == wx.WXK_LEFT) {
			imageInfos = this.containerInfoSel.imageInfos
			if (this.imageInfoSel) {
				idxImage = imageInfos.find(this.imageInfoSel):index
				if (idxImage > 0) {
					this.imageInfoSel = imageInfos[idxImage - 1]
				}
			} else {
				this.containerInfoSel.expandFlag = false
				this.ChangeExpandStatus(this.containerInfoSel)
			}
			this.EnsureSelectionVisible()
			this.UpdateContent()
		} elsif (keyCode == wx.WXK_RIGHT) {
			imageInfos = this.containerInfoSel.imageInfos
			if (this.imageInfoSel) {
				idxImage = imageInfos.find(this.imageInfoSel):index
				if (idxImage + 1 < imageInfos.len()) {
					this.imageInfoSel = imageInfos[idxImage + 1]
				}
			} else {
				this.containerInfoSel.expandFlag = true
				this.ChangeExpandStatus(this.containerInfoSel)
			}
			this.EnsureSelectionVisible()
			this.UpdateContent()
		}
	}
	OnIdle(event:wx.IdleEvent) = {
		this.imageInfoQue.isempty() && return
		updateFlag = false
		repeat (5) {
			this.imageInfoQue.isempty() && break
			imageInfo = this.imageInfoQue[0]
			this.imageInfoQue.erase(0)
			if (imageInfo.UpdateImage(sizeThumbnail)) {
				updateFlag = true
			}
		}
		updateFlag && this.UpdateContent()
	}
}

//-----------------------------------------------------------------------------
// MainPanel
//-----------------------------------------------------------------------------
MainPanel = class(wx.Panel) {
	TimerId = 1
	__init__(parent:wx.Windowm) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 4))
		wx.FlexGridSizer(nil, 3, 4, 4) {|gbox|
			vbox.Add(gbox, wx.SizerFlags().Expand())
			gbox.AddGrowableCol(1, 1)
			wx.StaticText(this, wx.ID_ANY, 'Source Folder'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_CENTRE_VERTICAL))
			}
			wx.StaticText(this, wx.ID_ANY, g.dirNameSource,
						  style => wx.SUNKEN_BORDER | wx.ST_NO_AUTORESIZE) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.textSource = ctrl
			}
			wx.Button(this, wx.ID_ANY, 'Browse'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags())
				this.Bind(wx.EVT_BUTTON, ctrl.GetId()) {|event|
					this.OnBtn_SourceBrowse(event)
				}
			}
			
			wx.StaticText(this, wx.ID_ANY, 'Storage Folder'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_CENTRE_VERTICAL))
			}
			wx.StaticText(this, wx.ID_ANY, g.dirNameStorage,
						  style => wx.SUNKEN_BORDER | wx.ST_NO_AUTORESIZE) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.textStorage = ctrl
			}
			wx.Button(this, wx.ID_ANY, 'Browse'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags())
				this.Bind(wx.EVT_BUTTON, ctrl.GetId()) {|event|
					this.OnBtn_StorageBrowse(event)
				}
			}
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Align(wx.CENTRE).Border(wx.TOP, 4))
			wx.Button(this, wx.ID_ANY, 'Start to Copy Image Files'$,
					  size => wx.Size(300, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand())
				this.Bind(wx.EVT_BUTTON, ctrl.GetId()) {|event|
					this.OnBtn_CopyImageFiles(event)
				}
				this.btnStart = ctrl
			}
			wx.StaticText(this, wx.ID_ANY, '', size => wx.Size(100, -1),
						  style => wx.ST_NO_AUTORESIZE | wx.ALIGN_CENTRE_HORIZONTAL | \
						  			wx.BORDER_SUNKEN) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 8))
				this.labelIndicator = ctrl
			}
			wx.Button(this, wx.ID_ANY, 'Quit'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 8))
				this.Bind(wx.EVT_BUTTON, ctrl.GetId()) {|event|
					this.OnBtn_Quit(event)
				}
				this.btnQuit = ctrl
			}
		}
		ImageViewer(this, style => wx.SUNKEN_BORDER) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 4))
			this.imageViewer = ctrl
		}
		this.btnQuit.Enable(false)
		this.timer = wx.Timer(this, TimerId)
		this.btnStart.Enable(this.imageViewer.UpdateContainerInfosForSource())
		this.imageViewer.UpdateContainerInfosForStorage()
		this.imageViewer.InitSelection()
		this.Bind(wx.EVT_TIMER, this.TimerId) {|event| this.OnTimer(event)}
		this.timer.Start(1000, false)
	}
	OnBtn_SourceBrowse(event:wx.CommandEvent) = {
		style = wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST
		dlg = wx.DirDialog(this, 'Choose Source Folder'$, g.dirNameSource, style)
		if (dlg.ShowModal() == wx.ID_OK) {
			dirName = dlg.GetPath()
			g.dirNameSource = dirName
			this.textSource.SetLabel(dirName)
			this.btnStart.Enable(this.imageViewer.UpdateContainerInfosForSource())
			this.imageViewer.InitSelection()
			this.imageViewer.UpdateContent()
		}
	}
	OnBtn_StorageBrowse(event:wx.CommandEvent) = {
		style = wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST
		dlg = wx.DirDialog(this, 'Choose Storage Folder'$,
						   g.dirNameStorage, style)
		if (dlg.ShowModal() == wx.ID_OK) {
			dirName = dlg.GetPath()
			g.dirNameStorage = dirName
			this.textStorage.SetLabel(dirName)
			this.imageViewer.UpdateContainerInfosForStorage()
			this.imageViewer.InitSelection()
			this.imageViewer.UpdateContent()
		}
	}
	OnBtn_CopyImageFiles(event:wx.CommandEvent) = {
		this.btnStart.Enable(false)
		this.btnQuit.Enable(true)
		this.imageViewer.CopyImageFiles(this.labelIndicator)
		this.btnStart.Enable(true)
		this.btnQuit.Enable(false)
	}
	OnBtn_Quit(event:wx.CommandEvent) = {
		this.imageViewer.QuitCopy()
	}
	OnTimer(event:wx.TimerEvent) = {
		//dirNames = path.glob('/Volumes/*/DCIM'):dir
		//println(dirNames)
	}
}

//-----------------------------------------------------------------------------
// MainFrame
//-----------------------------------------------------------------------------
MainFrame = class(wx.Frame) {
	__init__(pos:wx.Point => wx.DefaultPosition) = \
		{|nil, wx.ID_ANY, 'Gura Capture', wx.Point(g.xMainWindow, g.yMainWindow),
		  wx.Size(g.wdMainWindow, g.htMainWindow)|
		this.SetIcon(g.icon)
		menuBar = wx.MenuBar()
		MainPanel(this)
		this.SetMenuBar(menuBar)
		wx.Menu {|m|
			menuBar.Append(m, '&Tools'$)
			m.Append(ID_EditPattern,		'&Edit Pattern...\tCtrl-E'$)
		}								
		this.Bind(wx.EVT_MENU, ID_EditPattern)	{|event| this.OnMenu_EditPattern(event)}
		this.Bind(wx.EVT_SIZE) {|event|
			//wx.LayoutAlgorithm().LayoutWindow(this, this.productViewer)
			this.UpdateSizePosInfo()
			event.Skip()
		}
	}
	UpdateSizePosInfo() = {
		(this.IsIconized() || this.IsMaximized()) && return
		[g.xMainWindow, g.yMainWindow] = this.GetScreenPositionXY()
		[g.wdMainWindow, g.htMainWindow] = this.GetSizeWH()
	}
	OnMenu_EditPattern(event:wx.CommandEvent) = {
		dlg = PatternEditorDialog(this)
		dlg.ShowModal()
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		!wx.utils.CheckGuraVersion(nil, 0, 7, 0) && return(false)
		!wx.utils.CheckGuraPlatform(nil, [`mswin, `linux, `darwin]) && return(false)
		g.InitializeResource()
		g.LoadConfig()
		frame = MainFrame()
		frame.Show()
		true
		//dlg = PatternEditorDialog(nil)
		//dlg.ShowModal()
		//false
	}
	OnExit() = {
		g.SaveConfig()
		0
	}
}

wx.IMPLEMENT_APP(App)
